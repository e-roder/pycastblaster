import time
import pychromecast
import web_crawler
import random
import os
import http.server
import socketserver
import threading
import socket
import image_processing
import uuid
import enum

##### config constants - TODO: don't hardcode?
local_images_path= "images/"
local_spliced_image_path= local_images_path + "temp/" # must be child of local_images_path in order to serve to Chromecast
http_server_port= 8000
server_url= "http://" + socket.gethostbyname(socket.gethostname()) + ":" + str(http_server_port)
chromecast_friendly_names= ["Family Room TV", "Basement Lights TV"]
slideshow_duration_seconds= 30

# file extension to MIME type
content_type_dictionary= {
    ".jpg" :  "image/jpeg",
    ".jpeg" : "image/jpeg",
    ".png" : "image.png" }

class ImageLayout(enum.IntEnum):
    Unknown= 0
    Landscape= 1
    Portrait= 2

class ImageReference:
    def __init__(self, local_image_path, url_path, image_layout=ImageLayout.Unknown):
        self.local_image_path= local_image_path
        self.url_path= url_path
        self.image_layout= image_layout

# Build the URL path:
# 1. include the root server URL
# 2. Remove the root of the local_images_path because HTTPHandler uses that as the root directory, so it's
# not included.
def local_image_file_path_to_url(local_image_file_path):
    return server_url + "/" + os.path.relpath(local_image_file_path, local_images_path)

# Convert a URL path (for a URL served by *our* HTTP server) back to a local path
def url_to_local_image_file_path(url):
    return local_images_path + url[len(server_url + "/"):]

# Custom class in order to serve up a specific subdirectory
class HTTPHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=local_images_path, **kwargs)

def web_server_thread():
    with http.server.ThreadingHTTPServer(("", http_server_port), HTTPHandler) as http_server:
        print("serving at port", http_server_port)
        http_server.serve_forever()

def main():
    # compile list of images from image file share
    image_references= [] # ImageReferences

    random.seed()

    print("Serving local directory '%s' and spinning up HTTP server '%s'" % (
        local_images_path,
        server_url))
    
    # Build images as a tuple of (URL path, is_portait). is_portait lets us quickly find and splice portrait
    # images together into a temporary image to serve
    # -Skip images that are in local_spliced_image_path (maybe left-over from a previous run)        
    image_references= [
        ImageReference(image_path, local_image_file_path_to_url(image_path), ImageLayout.Unknown)
        for image_path in image_processing.get_images_from_local_path(local_images_path)
            if not image_path.startswith(local_spliced_image_path)]
    # Spin up a separate thread to run a web server. The server exposes images in local_images_path to the Chromecast
    threading.Thread(target= web_server_thread).start()

    # Make sure the spliced image path exists since it's for files generated by the application, don't expect
    # users to create it
    if not os.path.exists(local_spliced_image_path):
        os.makedirs(local_spliced_image_path)

    # TODO: delete any files currently in the local_spliced_image_path from a previous run?
        
    random.shuffle(image_references)

    # List chromecasts on the network, but don't connect
    services, browser = pychromecast.discovery.discover_chromecasts()
    # Shut down discovery
    pychromecast.discovery.stop_discovery(browser)

    # Discover and connect to chromecasts named Living Room
    chromecasts, browser = pychromecast.get_listed_chromecasts(friendly_names=chromecast_friendly_names)

    cast = chromecasts[0]
    # Start worker thread and wait for cast device to be ready
    cast.wait()
    print(cast.cast_info)

    print(cast.status)
    mc = cast.media_controller
    
    # Quit gracefully (stops casting session)
    exit= False # nothing sets this now but we can poke it in the debugger
    # When we splice one portrait image with the next one in the list, we don't want to display that image
    # when we encounter it so we set this bool to ignore it.
    skip_next_portrait= False
    image_count= len(image_references)
    temp_image_file_names= []

    while(not exit):
        for image_index, image_reference in enumerate(image_references):
            # Lazily evaluate IsPortrait rather than on startup because it's slow (need to open image file and
            # potentially transpose it)
            if image_reference.image_layout == ImageLayout.Unknown:
                image_reference.image_layout= ImageLayout.Portrait if image_processing.image_is_portait(image_reference.local_image_path) else ImageLayout.Landscape
                image_references[image_index]= image_reference # Update list of images so we don't need to evaluate this image again

            if image_reference.image_layout == ImageLayout.Landscape:
                # Process image on the fly, generate a temporary file to store the processed image
                temp_image_file_name= local_spliced_image_path + str(uuid.uuid4()) + ".jpg"
                # Update temp_image_file_name in case process_image renamed it
                temp_image_file_name= image_processing.process_image_file(image_reference.local_image_path, temp_image_file_name)
                temp_image_file_names.append(temp_image_file_name)
                # generate a temporary image reference to the processed image
                image_reference= ImageReference(temp_image_file_name, local_image_file_path_to_url(temp_image_file_name), ImageLayout.Landscape)
            elif skip_next_portrait:
                # If this image is a portait, clear skip_next_portait and skip it
                skip_next_portrait= False
                continue
            else: # ImageLayout.Portrait
                # Find the next portait image in images to splice with
                # If there is one then set skip_next_portait, splice it with this one, and replace image
                for search_image_index in range(image_index + 1, image_count):
                    search_image= image_references[search_image_index]

                    # Lazily evaluate IsPortrait rather than on startup because it's slow (need to open image file and
                    # potentially transpose it)
                    if search_image.image_layout == ImageLayout.Unknown:
                        search_image.image_layout= ImageLayout.Portrait if image_processing.image_is_portait(search_image.local_image_path) else ImageLayout.Landscape
                        # Update list of images so we don't need to evaluate this image again
                        image_references[search_image_index]= search_image

                    if search_image.image_layout == ImageLayout.Portrait:
                        skip_next_portrait= True
                        # Select a temporary file name for the spliced image (generate a unique ID since chromecast caches images
                        # if we reuse file names)
                        spliced_image_file_name= local_spliced_image_path + str(uuid.uuid4()) + ".jpg"
                        temp_image_file_names.append(spliced_image_file_name)
                        print("Splicing '%s' + '%s' into '%s'" % (image_reference.local_image_path, search_image.local_image_path, spliced_image_file_name))
                        # create temporary spliced image
                        image_processing.splice_images(image_reference.local_image_path, search_image.local_image_path, spliced_image_file_name)
                        # generate a temporary image reference to the spliced image that now has a landscape layout
                        image_reference= ImageReference(spliced_image_file_name, local_image_file_path_to_url(spliced_image_file_name), ImageLayout.Landscape)
                        break

            # clean up temporary spliced images, leave a few around in-case they're still being served
            if len(temp_image_file_names) > 2:
                to_delete= temp_image_file_names.pop(0)
                if os.path.exists(to_delete):
                    print("Purging temporary image '%s'" % to_delete)
                    os.remove(to_delete)

            extension= os.path.splitext(image_reference.url_path)[1].lower()
            content_type= content_type_dictionary[extension]
            mc.play_media(image_reference.url_path, content_type)
            mc.block_until_active()
            time.sleep(slideshow_duration_seconds)
            
            if (exit):
               break
        
        random.shuffle(image_references)

    cast.quit_app()

    # Shut down discovery
    pychromecast.discovery.stop_discovery(browser)

main()